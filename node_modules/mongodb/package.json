{
  "_from": "mongodb",
  "_id": "mongodb@4.12.1",
  "_inBundle": false,
  "_integrity": "sha512-koT87tecZmxPKtxRQD8hCKfn+ockEL2xBiUvx3isQGI6mFmagWt4f4AyCE9J4sKepnLhMacoCTQQA6SLAI2L6w==",
  "_location": "/mongodb",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mongodb",
    "fetchSpec": "latest",
    "name": "mongodb",
    "raw": "mongodb",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongodb/-/mongodb-4.12.1.tgz",
  "_shasum": "224eb39b8784af835b515aa687c6010cecaabb1a",
  "_spec": "mongodb",
  "_where": "/home/daniel/Escritorio/prácticas/falso 4º/STW/fullstack_vue_express",
  "author": {
    "email": "dbx-node@mongodb.com",
    "name": "The MongoDB NodeJS Team"
  },
  "bugs": {
    "url": "https://jira.mongodb.org/projects/NODE/issues/"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@aws-sdk/credential-providers": "^3.186.0",
    "bson": "^4.7.0",
    "mongodb-connection-string-url": "^2.5.4",
    "saslprep": "^1.0.3",
    "socks": "^2.7.1"
  },
  "deprecated": false,
  "description": "The official MongoDB driver for Node.js",
  "devDependencies": {
    "@iarna/toml": "^2.2.5",
    "@istanbuljs/nyc-config-typescript": "^1.0.2",
    "@microsoft/api-extractor": "^7.33.3",
    "@microsoft/tsdoc-config": "^0.16.2",
    "@mongodb-js/zstd": "^1.0.0",
    "@types/chai": "^4.3.3",
    "@types/chai-subset": "^1.3.3",
    "@types/express": "^4.17.14",
    "@types/kerberos": "^1.1.1",
    "@types/mocha": "^10.0.0",
    "@types/node": "^18.11.0",
    "@types/saslprep": "^1.0.1",
    "@types/semver": "^7.3.12",
    "@types/sinon": "^10.0.13",
    "@types/sinon-chai": "^3.2.8",
    "@types/whatwg-url": "^11.0.0",
    "@typescript-eslint/eslint-plugin": "^5.40.0",
    "@typescript-eslint/parser": "^5.40.0",
    "bluebird": "^3.7.2",
    "chai": "^4.3.6",
    "chai-subset": "^1.6.0",
    "chalk": "^4.1.2",
    "eslint": "^8.25.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-simple-import-sort": "^8.0.0",
    "eslint-plugin-tsdoc": "^0.2.17",
    "express": "^4.18.2",
    "js-yaml": "^4.1.0",
    "mocha": "^9.2.2",
    "mocha-sinon": "^2.1.2",
    "nyc": "^15.1.0",
    "prettier": "^2.7.1",
    "rimraf": "^3.0.2",
    "semver": "^7.3.8",
    "sinon": "^13.0.1",
    "sinon-chai": "^3.7.0",
    "source-map-support": "^0.5.21",
    "standard-version": "^9.5.0",
    "ts-node": "^10.9.1",
    "tsd": "^0.24.1",
    "typescript": "^4.8.4",
    "typescript-cached-transpile": "^0.0.6",
    "xml2js": "^0.4.23",
    "yargs": "^17.6.0"
  },
  "engines": {
    "node": ">=12.9.0"
  },
  "files": [
    "etc/prepare.js",
    "lib",
    "mongodb.d.ts",
    "src",
    "tsconfig.json"
  ],
  "homepage": "https://github.com/mongodb/node-mongodb-native",
  "keywords": [
    "driver",
    "mongodb",
    "official"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "name": "mongodb",
  "optionalDependencies": {
    "@aws-sdk/credential-providers": "^3.186.0",
    "saslprep": "^1.0.3"
  },
  "readme": "# MongoDB NodeJS Driver\n\nThe official [MongoDB](https://www.mongodb.com/) driver for Node.js.\n\n**Upgrading to version 4? Take a look at our [upgrade guide here](https://github.com/mongodb/node-mongodb-native/blob/HEAD/etc/notes/CHANGES_4.0.0.md)!**\n\n## Quick Links\n\n| what          | where                                                                                                   |\n| ------------- | ------------------------------------------------------------------------------------------------------- |\n| documentation | [docs.mongodb.com/drivers/node](https://docs.mongodb.com/drivers/node)                                  |\n| api-doc       | [mongodb.github.io/node-mongodb-native/](https://mongodb.github.io/node-mongodb-native/)                |\n| npm package   | [www.npmjs.com/package/mongodb](https://www.npmjs.com/package/mongodb)                                  |\n| source        | [github.com/mongodb/node-mongodb-native](https://github.com/mongodb/node-mongodb-native)                |\n| mongodb       | [www.mongodb.com](https://www.mongodb.com)                                                              |\n| changelog     | [HISTORY.md](https://github.com/mongodb/node-mongodb-native/blob/HEAD/HISTORY.md)                       |\n| upgrade to v4 | [etc/notes/CHANGES_4.0.0.md](https://github.com/mongodb/node-mongodb-native/blob/HEAD/etc/notes/CHANGES_4.0.0.md) |\n| contributing  | [CONTRIBUTING.md](https://github.com/mongodb/node-mongodb-native/blob/HEAD/CONTRIBUTING.md)             |\n\n### Bugs / Feature Requests\n\nThink you’ve found a bug? Want to see a new feature in `node-mongodb-native`? Please open a\ncase in our issue management tool, JIRA:\n\n- Create an account and login [jira.mongodb.org](https://jira.mongodb.org).\n- Navigate to the NODE project [jira.mongodb.org/browse/NODE](https://jira.mongodb.org/browse/NODE).\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. NODE, PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are **public**.\n\n### Support / Feedback\n\nFor issues with, questions about, or feedback for the Node.js driver, please look into our [support channels](https://docs.mongodb.com/manual/support). Please do not email any of the driver developers directly with issues or questions - you're more likely to get an answer on the [MongoDB Community Forums](https://community.mongodb.com/tags/c/drivers-odms-connectors/7/node-js-driver).\n\n### Change Log\n\nChange history can be found in [`HISTORY.md`](https://github.com/mongodb/node-mongodb-native/blob/HEAD/HISTORY.md).\n\n### Compatibility\n\nFor version compatibility matrices, please refer to the following links:\n\n- [MongoDB](https://docs.mongodb.com/drivers/node/current/compatibility/#mongodb-compatibility)\n- [NodeJS](https://docs.mongodb.com/drivers/node/current/compatibility/#language-compatibility)\n\n#### Typescript Version\n\nWe recommend using the latest version of typescript, however we currently ensure the driver's public types compile against `typescript@4.1.6`.\nThis is the lowest typescript version guaranteed to work with our driver: older versions may or may not work - use at your own risk.\nSince typescript [does not restrict breaking changes to major versions](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes) we consider this support best effort.\nIf you run into any unexpected compiler failures against our supported TypeScript versions please let us know by filing an issue on our [JIRA](https://jira.mongodb.org/browse/NODE).\n\n## Installation\n\nThe recommended way to get started using the Node.js 4.x driver is by using the `npm` (Node Package Manager) to install the dependency in your project.\n\nAfter you've created your own project using `npm init`, you can run:\n\n```bash\nnpm install mongodb\n# or ...\nyarn add mongodb\n```\n\nThis will download the MongoDB driver and add a dependency entry in your `package.json` file.\n\nIf you are a Typescript user, you will need the Node.js type definitions to use the driver's definitions:\n\n```sh\nnpm install -D @types/node\n```\n\n## Troubleshooting\n\nThe MongoDB driver depends on several other packages. These are:\n\n- [bson](https://github.com/mongodb/js-bson)\n- [bson-ext](https://github.com/mongodb-js/bson-ext)\n- [kerberos](https://github.com/mongodb-js/kerberos)\n- [mongodb-client-encryption](https://github.com/mongodb/libmongocrypt#readme)\n\nSome of these packages include native C++ extensions. Consult the [trouble shooting guide here](https://github.com/mongodb/node-mongodb-native/blob/HEAD/etc/notes/native-extensions.md) if you run into issues.\n\n## Quick Start\n\nThis guide will show you how to set up a simple application using Node.js and MongoDB. Its scope is only how to set up the driver and perform the simple CRUD operations. For more in-depth coverage, see the [official documentation](https://docs.mongodb.com/drivers/node/).\n\n### Create the `package.json` file\n\nFirst, create a directory where your application will live.\n\n```bash\nmkdir myProject\ncd myProject\n```\n\nEnter the following command and answer the questions to create the initial structure for your new project:\n\n```bash\nnpm init -y\n```\n\nNext, install the driver as a dependency.\n\n```bash\nnpm install mongodb\n```\n\n### Start a MongoDB Server\n\nFor complete MongoDB installation instructions, see [the manual](https://docs.mongodb.org/manual/installation/).\n\n1. Download the right MongoDB version from [MongoDB](https://www.mongodb.org/downloads)\n2. Create a database directory (in this case under **/data**).\n3. Install and start a `mongod` process.\n\n```bash\nmongod --dbpath=/data\n```\n\nYou should see the **mongod** process start up and print some status information.\n\n### Connect to MongoDB\n\nCreate a new **app.js** file and add the following code to try out some basic CRUD\noperations using the MongoDB driver.\n\nAdd code to connect to the server and the database **myProject**:\n\n> **NOTE:** All the examples below use async/await syntax.\n>\n> However, all async API calls support an optional callback as the final argument,\n> if a callback is provided a Promise will not be returned.\n\n```js\nconst { MongoClient } = require('mongodb');\n// or as an es module:\n// import { MongoClient } from 'mongodb'\n\n// Connection URL\nconst url = 'mongodb://localhost:27017';\nconst client = new MongoClient(url);\n\n// Database Name\nconst dbName = 'myProject';\n\nasync function main() {\n  // Use connect method to connect to the server\n  await client.connect();\n  console.log('Connected successfully to server');\n  const db = client.db(dbName);\n  const collection = db.collection('documents');\n\n  // the following code examples can be pasted here...\n\n  return 'done.';\n}\n\nmain()\n  .then(console.log)\n  .catch(console.error)\n  .finally(() => client.close());\n```\n\nRun your app from the command line with:\n\n```bash\nnode app.js\n```\n\nThe application should print **Connected successfully to server** to the console.\n\n### Insert a Document\n\nAdd to **app.js** the following function which uses the **insertMany**\nmethod to add three documents to the **documents** collection.\n\n```js\nconst insertResult = await collection.insertMany([{ a: 1 }, { a: 2 }, { a: 3 }]);\nconsole.log('Inserted documents =>', insertResult);\n```\n\nThe **insertMany** command returns an object with information about the insert operations.\n\n### Find All Documents\n\nAdd a query that returns all the documents.\n\n```js\nconst findResult = await collection.find({}).toArray();\nconsole.log('Found documents =>', findResult);\n```\n\nThis query returns all the documents in the **documents** collection.\nIf you add this below the insertMany example you'll see the document's you've inserted.\n\n### Find Documents with a Query Filter\n\nAdd a query filter to find only documents which meet the query criteria.\n\n```js\nconst filteredDocs = await collection.find({ a: 3 }).toArray();\nconsole.log('Found documents filtered by { a: 3 } =>', filteredDocs);\n```\n\nOnly the documents which match `'a' : 3` should be returned.\n\n### Update a document\n\nThe following operation updates a document in the **documents** collection.\n\n```js\nconst updateResult = await collection.updateOne({ a: 3 }, { $set: { b: 1 } });\nconsole.log('Updated documents =>', updateResult);\n```\n\nThe method updates the first document where the field **a** is equal to **3** by adding a new field **b** to the document set to **1**. `updateResult` contains information about whether there was a matching document to update or not.\n\n### Remove a document\n\nRemove the document where the field **a** is equal to **3**.\n\n```js\nconst deleteResult = await collection.deleteMany({ a: 3 });\nconsole.log('Deleted documents =>', deleteResult);\n```\n\n### Index a Collection\n\n[Indexes](https://docs.mongodb.org/manual/indexes/) can improve your application's\nperformance. The following function creates an index on the **a** field in the\n**documents** collection.\n\n```js\nconst indexName = await collection.createIndex({ a: 1 });\nconsole.log('index name =', indexName);\n```\n\nFor more detailed information, see the [indexing strategies page](https://docs.mongodb.com/manual/applications/indexes/).\n\n## Error Handling\n\nIf you need to filter certain errors from our driver we have a helpful tree of errors described in [etc/notes/errors.md](https://github.com/mongodb/node-mongodb-native/blob/HEAD/etc/notes/errors.md).\n\nIt is our recommendation to use `instanceof` checks on errors and to avoid relying on parsing `error.message` and `error.name` strings in your code.\nWe guarantee `instanceof` checks will pass according to semver guidelines, but errors may be sub-classed or their messages may change at any time, even patch releases, as we see fit to increase the helpfulness of the errors.\n\nAny new errors we add to the driver will directly extend an existing error class and no existing error will be moved to a different parent class outside of a major release.\nThis means `instanceof` will always be able to accurately capture the errors that our driver throws (or returns in a callback).\n\n```typescript\nconst client = new MongoClient(url);\nawait client.connect();\nconst collection = client.db().collection('collection');\n\ntry {\n  await collection.insertOne({ _id: 1 });\n  await collection.insertOne({ _id: 1 }); // duplicate key error\n} catch (error) {\n  if (error instanceof MongoServerError) {\n    console.log(`Error worth logging: ${error}`); // special case for some reason\n  }\n  throw error; // still want to crash\n}\n```\n\n## Next Steps\n\n- [MongoDB Documentation](https://docs.mongodb.com/manual/)\n- [MongoDB Node Driver Documentation](https://docs.mongodb.com/drivers/node/)\n- [Read about Schemas](https://docs.mongodb.com/manual/core/data-modeling-introduction/)\n- [Star us on GitHub](https://github.com/mongodb/node-mongodb-native)\n\n## License\n\n[Apache 2.0](LICENSE.md)\n\n© 2009-2012 Christian Amor Kvalheim\n© 2012-present MongoDB [Contributors](https://github.com/mongodb/node-mongodb-native/blob/HEAD/CONTRIBUTORS.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mongodb/node-mongodb-native.git"
  },
  "scripts": {
    "build:docs": "./etc/docs/build.ts",
    "build:dts": "npm run build:ts && api-extractor run && rimraf 'lib/**/*.d.ts*'",
    "build:evergreen": "node .evergreen/generate_evergreen_tasks.js",
    "build:ts": "node ./node_modules/typescript/bin/tsc",
    "build:typedoc": "typedoc",
    "check:adl": "mocha --config test/mocha_mongodb.json test/manual/atlas-data-lake-testing",
    "check:atlas": "mocha --config test/manual/mocharc.json test/manual/atlas_connectivity.test.js",
    "check:aws": "mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_aws.test.ts",
    "check:bench": "node test/benchmarks/driverBench",
    "check:coverage": "nyc npm run test:all",
    "check:csfle": "mocha --config test/mocha_mongodb.json test/integration/client-side-encryption",
    "check:dependencies": "mocha test/action/dependency.test.ts",
    "check:dts": "node ./node_modules/typescript/bin/tsc --noEmit mongodb.d.ts && tsd",
    "check:eslint": "eslint -v && eslint --max-warnings=0 --ext '.js,.ts' src test",
    "check:integration-coverage": "nyc npm run check:test",
    "check:kerberos": "mocha --config test/manual/mocharc.json test/manual/kerberos.test.js",
    "check:lambda": "mocha --config test/mocha_lambda.json test/integration/node-specific/examples/handler.test.js",
    "check:lambda:aws": "mocha --config test/mocha_lambda.json test/integration/node-specific/examples/aws_handler.test.js",
    "check:ldap": "mocha --config test/manual/mocharc.json test/manual/ldap.test.js",
    "check:lint": "npm run build:dts && npm run check:dts && npm run check:eslint && npm run check:tsd",
    "check:ocsp": "mocha --config test/manual/mocharc.json test/manual/ocsp_support.test.js",
    "check:snappy": "mocha test/unit/assorted/snappy.test.js",
    "check:socks5": "mocha --config test/manual/mocharc.json test/manual/socks5.test.ts",
    "check:test": "mocha --config test/mocha_mongodb.json test/integration",
    "check:tls": "mocha --config test/manual/mocharc.json test/manual/tls_support.test.js",
    "check:ts": "node ./node_modules/typescript/bin/tsc -v && node ./node_modules/typescript/bin/tsc --noEmit",
    "check:tsd": "tsd --version && tsd",
    "check:unit": "mocha test/unit",
    "fix:eslint": "npm run check:eslint -- --fix",
    "prepare": "node etc/prepare.js",
    "preview:docs": "ts-node etc/docs/preview.ts",
    "release": "bash etc/check-remote.sh && standard-version -a -i HISTORY.md",
    "test": "npm run check:lint && npm run test:all",
    "test:all": "npm run check:unit && npm run check:test",
    "update:docs": "npm run build:docs -- --yes"
  },
  "tsd": {
    "compilerOptions": {
      "module": "commonjs",
      "moduleResolution": "node",
      "strict": true,
      "target": "esnext"
    },
    "directory": "test/types"
  },
  "types": "mongodb.d.ts",
  "version": "4.12.1"
}
